# coding: utf-8

"""
    NLP Sandbox Date Annotator API

    The OpenAPI specification implemented by NLP Sandbox Date Annotators. # Overview This NLP tool detects date references in the clinical note specified and returns a list of date annotations.   # noqa: E501

    The version of the OpenAPI document: 0.3.1
    Contact: thomas.schaffter@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest
import datetime

import annotator
from annotator.models.tool_dependencies import ToolDependencies  # noqa: E501
from annotator.rest import ApiException

class TestToolDependencies(unittest.TestCase):
    """ToolDependencies unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional):
        """Test ToolDependencies
            include_option is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # model = annotator.models.tool_dependencies.ToolDependencies()  # noqa: E501
        if include_optional :
            return ToolDependencies(
                tool_dependencies = [
                    annotator.models.tool.Tool(
                        name = 'awesome-date-annotator', 
                        version = '1.0.0', 
                        license = 'apache-2.0', 
                        repository = 'github:awesome-org/awesome-date-annotator', 
                        description = 'An awesome Date Annotator based on regex patterns', 
                        author = 'Example Author', 
                        author_email = 'author@example.com', 
                        url = '0', 
                        tool_type = 'nlpsandbox:date-annotator', )
                    ]
            )
        else :
            return ToolDependencies(
        )

    def testToolDependencies(self):
        """Test ToolDependencies"""
        inst_req_only = self.make_instance(include_optional=False)
        inst_req_and_optional = self.make_instance(include_optional=True)


if __name__ == '__main__':
    unittest.main()
