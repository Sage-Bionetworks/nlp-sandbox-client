# coding: utf-8

"""
    NLP Sandbox Date Annotator API

    The OpenAPI specification implemented by NLP Sandbox Annotators.   # noqa: E501

    The version of the OpenAPI document: 0.3.1
    Contact: thomas.schaffter@sagebionetworks.org
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from annotator.configuration import Configuration


class License(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    allowed enum values
    """
    AFL_3_0 = "afl-3.0"
    APACHE_2_0 = "apache-2.0"
    ARTISTIC_2_0 = "artistic-2.0"
    BSL_1_0 = "bsl-1.0"
    BSD_2_CLAUSE = "bsd-2-clause"
    BSD_3_CLAUSE = "bsd-3-clause"
    BSD_3_CLAUSE_CLEAR = "bsd-3-clause-clear"
    CC = "cc"
    CC0_1_0 = "cc0-1.0"
    CC_BY_4_0 = "cc-by-4.0"
    CC_BY_SA_4_0 = "cc-by-sa-4.0"
    WTFPL = "wtfpl"
    ECL_2_0 = "ecl-2.0"
    EPL_1_0 = "epl-1.0"
    EPL_2_0 = "epl-2.0"
    EUPL_1_1 = "eupl-1.1"
    AGPL_3_0 = "agpl-3.0"
    GPL = "gpl"
    GPL_2_0 = "gpl-2.0"
    GPL_3_0 = "gpl-3.0"
    LGPL = "lgpl"
    LGPL_2_1 = "lgpl-2.1"
    LGPL_3_0 = "lgpl-3.0"
    ISC = "isc"
    LPPL_1_3C = "lppl-1.3c"
    MS_PL = "ms-pl"
    MIT = "mit"
    MPL_2_0 = "mpl-2.0"
    OSL_3_0 = "osl-3.0"
    POSTGRESQL = "postgresql"
    OFL_1_1 = "ofl-1.1"
    NCSA = "ncsa"
    UNLICENSE = "unlicense"
    ZLIB = "zlib"

    allowable_values = [AFL_3_0, APACHE_2_0, ARTISTIC_2_0, BSL_1_0, BSD_2_CLAUSE, BSD_3_CLAUSE, BSD_3_CLAUSE_CLEAR, CC, CC0_1_0, CC_BY_4_0, CC_BY_SA_4_0, WTFPL, ECL_2_0, EPL_1_0, EPL_2_0, EUPL_1_1, AGPL_3_0, GPL, GPL_2_0, GPL_3_0, LGPL, LGPL_2_1, LGPL_3_0, ISC, LPPL_1_3C, MS_PL, MIT, MPL_2_0, OSL_3_0, POSTGRESQL, OFL_1_1, NCSA, UNLICENSE, ZLIB]  # noqa: E501

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
    }

    attribute_map = {
    }

    def __init__(self, local_vars_configuration=None):  # noqa: E501
        """License - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration
        self.discriminator = None

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, License):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, License):
            return True

        return self.to_dict() != other.to_dict()
